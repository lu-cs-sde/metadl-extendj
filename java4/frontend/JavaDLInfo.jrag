aspect JavaDLInfo {
	public Object ASTNode.type() { return null; }
	public Object ASTNode.decl() { return null; }
	public Object ASTNode.genericDecl() { return null; }
	public boolean ASTNode.isGeneric() { return false; }
	public boolean ParTypeDecl.isGeneric() { return true; }

	/** Perform node numbering for NTAs. We do this depth-first, just
		because it's easier to implement. */
	long ASTNode.doNodeNumberingNTA(long start, Map<ASTNode, Long> nodeToId) {
		nodeToId.put(this, start);
		start++;

		// number the children first
		for (int i = 0; i < getNumChild(); ++i) {
			ASTNode child = getChild(i);
			if (child != null) {
				start = child.doNodeNumberingNTA(start, nodeToId);
			}
		}

		return start;
	}

	/**
		Node numbering for AST nodes (including rewritten ones). Set last = null,
		to number all nodes.
	 */
	private Queue<ASTNode> CompilationUnit.nodeNumberingQueue = new ArrayDeque<ASTNode>(Collections.<ASTNode>singleton(this));
	private int CompilationUnit.currentNodeIdx = 1;
	boolean CompilationUnit.numberNodesUntil(ASTNode last, int fileId, Map<ASTNode, Long> nodeToId) {
		while (!nodeNumberingQueue.isEmpty()) {
			ASTNode n = nodeNumberingQueue.poll();
			nodeToId.put(n, (((long) fileId) << 32) | currentNodeIdx);
			currentNodeIdx++;
			for (int i = 0; i < n.getNumChild(); ++i) {
				ASTNode child = n.getChild(i);
				if (child == null)
					continue;
				nodeNumberingQueue.add(child);
			}

			if (n == last) {
				// we reached the node we wanted to be numbered; return
				return true;
			}
		}
		// we haven't found the node to be numbered;
		// this should not happen, but maybe it does
		return false;
	}

	public void ASTNode.printNodesBelow() {
		System.out.println(this);
		if (getParent() != null)
			getParent().printNodesBelow();
	}

	/**
	   Find the compilation unit for this node, if it's not
	   an NTA.
	 */
	syn lazy CompilationUnit ASTNode.parentCompilationUnit() {
		if (this instanceof CompilationUnit) {
			return (CompilationUnit) this;
		}
		if (getParent() != null) {
			ASTNode parent = getParent();
			if (parent.getIndexOfChild(this) >= 0 &&
				parent.getIndexOfChild(this) < parent.getNumChild()) {
				// check that the child is not an NTA child
				return getParent().parentCompilationUnit();
			}
		}

		return null;
	}

	/**
	   Number this node on-demand. The numbering is successful if this
	   is a non-NTA node.
	 */
	public boolean ASTNode.numberOnDemand(FileIdStorage fidStorage, Map<ASTNode, Long> nodeToId) {
		// Number the nodes in the compilation unit of the node
		CompilationUnit cu = parentCompilationUnit();
		if (cu != null) {
			// this is a true AST node, not an NTA
			int fileId = fidStorage.getIdForLib(cu.getClassSource().relativeName());
			if (cu.numberNodesUntil(this, fileId, nodeToId)) {
				return true;
			}
		}

		// NTAs for primitive types
		if (this.numberPrimitiveType(nodeToId)) {
			return true;
		}

		return false;
	}

	public long ASTNode.nodeId(FileIdStorage fidStorage, Map<ASTNode, Long> nodeToId) {
		Long id = nodeToId.get(this);
		if (id != null) {
			return id;
		}

		if (this.numberOnDemand(fidStorage, nodeToId)) {
			return nodeToId.get(this);
		}

		// // This is a NTA. Try to find the original node it comes from
		// ASTNode unwrappedNode = this.unwrapNTANode();
		// if (unwrappedNode != null) {
		// 	return unwrappedNode.nodeId(fidStorage, nodeToId);
		// }
		return -1;
	}

	// Node numbers for primitive types
	public boolean ASTNode.numberPrimitiveType(Map<ASTNode, Long> nodeToId) {
		return false;
	}

	public boolean BooleanType.numberPrimitiveType(Map<ASTNode, Long> nodeToId) {
		doNodeNumberingNTA(100, nodeToId);
		return true;
	}

	public boolean ByteType.numberPrimitiveType(Map<ASTNode, Long> nodeToId) {
		doNodeNumberingNTA(200, nodeToId);
		return true;
	}

	public boolean ShortType.numberPrimitiveType(Map<ASTNode, Long> nodeToId) {
		doNodeNumberingNTA(300, nodeToId);
		return true;
	}

	public boolean CharType.numberPrimitiveType(Map<ASTNode, Long> nodeToId) {
		doNodeNumberingNTA(400, nodeToId);
		return true;
	}

	public boolean IntType.numberPrimitiveType(Map<ASTNode, Long> nodeToId) {
		doNodeNumberingNTA(500, nodeToId);
		return true;
	}

	public boolean LongType.numberPrimitiveType(Map<ASTNode, Long> nodeToId) {
		doNodeNumberingNTA(600, nodeToId);
		return true;
	}

	public boolean FloatType.numberPrimitiveType(Map<ASTNode, Long> nodeToId) {
		doNodeNumberingNTA(700, nodeToId);
		return true;
	}

	public boolean DoubleType.numberPrimitiveType(Map<ASTNode, Long> nodeToId) {
		doNodeNumberingNTA(800, nodeToId);
		return true;
	}

	public boolean VoidType.numberPrimitiveType(Map<ASTNode, Long> nodeToId) {
		doNodeNumberingNTA(900, nodeToId);
		return true;
	}

	public boolean NullType.numberPrimitiveType(Map<ASTNode, Long> nodeToId) {
		doNodeNumberingNTA(1000, nodeToId);
		return true;
	}

	public boolean UnknownType.numberPrimitiveType(Map<ASTNode, Long> nodeToId) {
		doNodeNumberingNTA(2000, nodeToId);
		return true;
	}
	// ================================================================================

	// Unwrap nodes that are NTAs to their inner (hopefuly) non-NTA node
	public ASTNode ASTNode.unwrapNTANode() {
		return null;
	}

	public ASTNode MethodDeclSubstituted.unwrapNTANode() {
		return getOriginal();
	}

	public ASTNode GenericMethodDeclSubstituted.unwrapNTANode() {
		return getOriginal();
	}

	public ASTNode GenericMethodDeclErased.unwrapNTANode() {
		return getOriginal();
	}

	public ASTNode ConstructorDeclSubstituted.unwrapNTANode() {
		return sourceConstructorDecl();
	}

	public ASTNode GenericConstructorDeclSubstituted.unwrapNTANode() {
		return getOriginal();
	}

	public ASTNode GenericConstructorDeclErased.unwrapNTANode() {
		return getOriginal();
	}

	public ASTNode FieldDeclSubstituted.unwrapNTANode() {
		return getOriginal();
	}

	public ASTNode FieldDeclarationSubstituted.unwrapNTANode() {
		return getOriginal();
	}

	public ASTNode ParClassDecl.unwrapNTANode() {
		return original();
	}

	public ASTNode ParInterfaceDecl.unwrapNTANode() {
		return original();
	}

	public ASTNode ParMethodDecl.unwrapNTANode() {
		return genericMethodDecl();
	}

	public ASTNode ParConstructorDecl.unwrapNTANode() {
		return genericConstructorDecl();
	}

	public interface FileIdStorage {
		int getIdForFile(String file);
		int getIdForLib(String lib);
	}

	public FileIdStorage Program.fileIdStorage = null;

	syn lazy int ASTNode.rpoNum() {
		if (getNumChild() != 0) {
			ASTNode lastChild = getChild(getNumChild() - 1);
			if (lastChild.rpoNum() != NTACHILD)
				return lastChild.rpoNum() + 1;
			return NTACHILD;
		} else {
			int ls = leftSiblingsRpoNum();
			if (ls != NTACHILD)
				return ls + 1;
			else
				return NTACHILD;
		}
	}

	static int ASTNode.NOLEFTSIBLING = -1;
	static int ASTNode.NTACHILD = -2;

	inh lazy int ASTNode.leftSiblingsRpoNum();
	eq ASTNode.getChild(int i).leftSiblingsRpoNum() {
		if (i == 0) {
			if (this instanceof CompilationUnit)
				return NOLEFTSIBLING;
			else return leftSiblingsRpoNum();
		} else if (i > 0) {
			return getChild(i - 1).rpoNum();
		} else {
			// i < 0, this is not a proper child, it is an NTA
			return NTACHILD;
		}
	}

	inh lazy ASTNode ASTNode.leftSibling();

	eq ASTNode.getChild(int i).leftSibling() {
		if (i == 0) {
			if (this instanceof CompilationUnit)
				return null;
			return this.leftSibling();
		} else {
			return getChild(i - 1);
		}
	}

	inh ASTNode ASTNode.rewrittenFrom();
	eq ASTNode.getChild(int i).rewrittenFrom() {
		if (i < 0)
			return null;

		if (getChildNoTransform(i) != getChild(i))
			return getChildNoTransform(i);
		return null;
	}

	syn ASTNode ASTNode.rewrittenTo() {
		if (!canRewrite())
			return null;
		return rewrittenNode();
	}
}
