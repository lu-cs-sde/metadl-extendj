aspect JavaDLInfo {
	public Object ASTNode.javaDLInfo = null;
	public int ASTNode.javaDLNum = -1;
	public int ASTNode.javaDLFileId = -1;
	public boolean ASTNode.visitedMarker = false;

	public Object ASTNode.type() { return null; }
	public Object ASTNode.decl() { return null; }
	public Object ASTNode.genericDecl() { return null; }

	// perform node numbering
	public int ASTNode.doNodeNumbering(int start, int fileId) {
		// number the children first
		for (int i = 0; i < getNumChildNoTransform(); ++i) {
			start = getChildNoTransform(i).doNodeNumbering(start, fileId);
			if (getChild(i) != getChildNoTransform(i)) {
				start = getChild(i).doNodeNumbering(start, fileId);
			}
		}

		// number the current node
		javaDLNum = start;
		javaDLFileId = fileId;

		return start + 1;
	}

	// find the current compilation unit for a given node
	inh CompilationUnit ASTNode.parentCompilationUnit();
	eq CompilationUnit.getChild().parentCompilationUnit() = this;

	public interface FileIdStorage {
		int getIdForFile(String file);
		int getIdForLib(String lib);
	}

	public FileIdStorage Program.fileIdStorage = null;

	syn lazy int ASTNode.rpoNum() {
		if (getNumChild() != 0) {
			ASTNode lastChild = getChild(getNumChild() - 1);
			if (lastChild.rpoNum() != NTACHILD)
				return lastChild.rpoNum() + 1;
			return NTACHILD;
		} else {
			int ls = leftSiblingsRpoNum();
			if (ls != NTACHILD)
				return ls + 1;
			else
				return NTACHILD;
		}
	}

	static int ASTNode.NOLEFTSIBLING = -1;
	static int ASTNode.NTACHILD = -2;

	inh lazy int ASTNode.leftSiblingsRpoNum();
	eq ASTNode.getChild(int i).leftSiblingsRpoNum() {
		if (i == 0) {
			if (this instanceof CompilationUnit)
				return NOLEFTSIBLING;
			else return leftSiblingsRpoNum();
		} else if (i > 0) {
			return getChild(i - 1).rpoNum();
		} else {
			// i < 0, this is not a proper child, it is an NTA
			return NTACHILD;
		}
	}

	inh lazy ASTNode ASTNode.leftSibling();

	eq ASTNode.getChild(int i).leftSibling() {
		if (i == 0) {
			if (this instanceof CompilationUnit)
				return null;
			return this.leftSibling();
		} else {
			return getChild(i - 1);
		}
	}

	inh ASTNode ASTNode.rewrittenFrom();
	eq ASTNode.getChild(int i).rewrittenFrom() {
		if (i < 0)
			return null;

		if (getChildNoTransform(i) != getChild(i))
			return getChildNoTransform(i);
		return null;
	}

	syn ASTNode ASTNode.rewrittenTo() {
		if (!canRewrite())
			return null;
		return rewrittenNode();
	}
}
